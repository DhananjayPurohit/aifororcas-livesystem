@page "/"

@inject ICandidateService CandidateService

<head>
	<meta charset="utf-8" />
</head>
<h1 class="orca-h1 orca-text-black">Candidates</h1>
<form class="form-inline" action="#">
	<input class="form-control mr-sm-2 orca-filter" style="width:500px" type="text" placeholder="Filter by resident whale type, node, or probability">
	<button class="btn btn-success orca-btn" type="submit">Filter</button>
</form>
<div class="container-fluid" style="margin-top: 25px;">
	<div class="row">
		<div class="col-lg-6" style="height: calc(100vh - 200px); overflow-y: scroll">

			@foreach(var candidate in candidates)
			{
			<div class="orca-data-strip container-fluid" @onclick="(() => FocusStrip(candidate))">
				<div class="row" style="padding:7px">
					<div class="col-lg-3" style="min-width:270px;">
						<img src="../images/Sample.png">
						<div>
							<i class="oi oi-media-play"></i>
							<i class="oi oi-media-pause"></i>
							<i class="oi oi-media-stop"></i>&nbsp;&nbsp;
							<i class="oi oi-media-step-backward"></i>
							<i class="oi oi-media-skip-backward"></i>&nbsp;
							<i class="oi oi-media-skip-forward"></i>
							<i class="oi oi-media-step-forward"></i>
						</div>
					</div>
					<div class="col-lg-7">
						<p class="orca-data-strip-header">@String.Join(", ", @candidate.Tags)</p>
						<p class="orca-data-strip-data"><i class="oi oi-compass"></i>&nbsp;@candidate.Node</p>
						<p class="orca-data-strip-data"><i class="oi oi-clock"></i>&nbsp;@candidate.Timestamp</p>
						<p class="orca-data-strip-data"><i class="oi oi-cog"></i>&nbsp;@candidate.Id</p>

						@if (candidate.Source == "AI")
							{
						<p class="orca-data-strip-data"><i class="oi oi-dashboard"></i>&nbsp;@candidate.Probability%</p>
							}
							else
							{
						<p class="orca-data-strip-data"><i class="oi oi-person"></i>&nbsp;"@candidate.Description"</p>
							}
					</div>
					<div class="col-lg-2" style="min-width:160px">
						<button class="btn btn-primary orca-btn" type="submit" @onclick="@(() => ConfirmCandidate(candidate))">Approve</button>
						<button class="btn btn-danger orca-btn" type="submit" @onclick="@(() => RejectCandidate(candidate))">Reject</button>
						<button class="btn btn-warning orca-btn" type="submit" @onclick="@(() => AnalyzeCandidate(candidate))">Analyze</button>
					</div>
				</div>
			</div>
			}
		</div>
		<div class="col-lg-6">
			<div class="track-order-map">
				<Map Zoom="0" Markers="MapMarkers"></Map>
			</div>
		</div>
	</div>
</div>
<ApproveCut Candidate="currentCandidate" DisplayModal="displayApproveModal" OnCancel="OnCancelApproveModal" OnConfirm="OnConfirmApproveModal" />
<RejectCut Candidate="currentCandidate" DisplayModal="displayRejectModal" OnCancel="OnCancelRejectModal" OnConfirm="OnConfirmRejectModal"/>
<AnalyzeCut Candidate="currentCandidate" DisplayModal="displayAnalyzeModal" OnCancel="OnCancelAnalyzeModal" OnConfirm="OnConfirmAnalyzeModal"/>


@code {

	private Candidate currentCandidate = new Candidate();
	private bool displayApproveModal = false;
	private bool displayRejectModal = false;
	private bool displayAnalyzeModal = false;

	public List<Marker> MapMarkers { get; set; } = new List<Marker>();

	private List<Candidate> candidates;

	protected override async Task OnInitializedAsync()
	{
		candidates = CandidateService.GetAll().ToList();

		MapMarkers = new List<Marker>
	{
			new Marker{Description="Port Townsend", ShowPopup=false, Y = 48.088922, X = -122.762901},
			new Marker{Description="Bush Point", ShowPopup=false, Y = 48.029424, X = -122.615434},
			new Marker{Description="Haro Point", ShowPopup=false, Y = 48.579333, X = -123.178732},
		};
	}

	private void FocusStrip(Candidate e)
	{
		var test = e;
	}

	private void AnalyzeCandidate(Candidate candidate)
	{
		displayAnalyzeModal = true;
		currentCandidate = candidate;
		StateHasChanged();
	}

	private void OnCancelAnalyzeModal()
	{
		displayAnalyzeModal = false;
		StateHasChanged();
	}

	private void OnConfirmAnalyzeModal()
	{
		candidates.Remove(currentCandidate);
		currentCandidate = null;
		displayAnalyzeModal = false;
		StateHasChanged();
	}

	private void ConfirmCandidate(Candidate candidate)
	{
		displayApproveModal = true;
		currentCandidate = candidate;
		StateHasChanged();
	}

	private void OnCancelApproveModal()
	{
		displayApproveModal = false;
		StateHasChanged();
	}

	private void OnConfirmApproveModal()
	{
		candidates.Remove(currentCandidate);
		currentCandidate = null;
		displayApproveModal = false;
		StateHasChanged();
	}

	private void RejectCandidate(Candidate candidate)
	{
		displayRejectModal = true;
		currentCandidate = candidate;
		StateHasChanged();
	}

	private void OnCancelRejectModal()
	{
		displayRejectModal = false;
		StateHasChanged();
	}

	private void OnConfirmRejectModal()
	{
		candidates.Remove(currentCandidate);
		currentCandidate = null;
		displayRejectModal = false;
		StateHasChanged();
	}

}

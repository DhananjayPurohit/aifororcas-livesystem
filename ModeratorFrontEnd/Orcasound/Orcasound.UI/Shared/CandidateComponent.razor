@inject IJSRuntime JSRuntime

<div tabindex="0" class="orca-data-strip @background" @onfocus="OnFocus">
	<EditForm Model="Candidate" class="container-fluid">
		<p class="orca-data-strip-header mt-0">@Candidate.Id</p>
		<div class="row" style="padding:7px">
			<div class="col-6">
				<p class="orca-data-strip-data"><i class="oi oi-clock" style="width: 20px"></i>&nbsp;@Candidate.Timestamp</p>
				<p class="orca-data-strip-data"><i class="oi oi-microphone" style="width: 20px"></i>&nbsp;@Candidate.Detections detection(s)</p>
    	            <div class="form-group mt-3 mb-0">
    	                <label class="mb-0">Was there an SRKW call in this clip?</label>
    	                <div style="display: grid">
    	                    @foreach (var option in optionList)
    	                    {
    	                        <label for=@(option + Candidate.Id)>
    	                            <input type="radio"
    	                                   name="found"
										   id=@(option + Candidate.Id)
    	                                   @onchange="(() => SetFoundValue(Candidate, option))" />
    	                            @option
    	                        </label>
    	                    }
    	                </div>
    	            </div>
					<div class="form-group">
						<label for=@($"tags-{Candidate.Id}")>Tags</label>
						<div>
							<InputText class="form-control" placeholder="Add tags" id=@($"tags-{Candidate.Id}") @bind-Value="@Candidate.Tags" />
						</div>
					</div>
			</div>
			<div class="col-6">
				<p class="orca-data-strip-data"><i class="oi oi-map-marker" style="width: 20px"></i>&nbsp;@Candidate.Location.Name</p>
				<p class="orca-data-strip-data"><i class="oi oi-graph" style="width: 20px"></i>&nbsp;@String.Format("{0:0.00}", Candidate.AverageConfidence)% average confidence</p>
				<div class="mt-2">
					<div id=@($"react-player-{Candidate.PlayerId}")></div>
				</div>
			</div>
			<div class="col-11 form-group">
				<label for=@($"comments-{Candidate.Id}")>Comments</label>
				<div>
					<InputTextArea class="form-control" placeholder="Add comments" id=@($"comments-{Candidate.Id}") @bind-Value="@Candidate.Comments" />
				</div>
			</div>
			<div class="col-6">
				<button class="btn btn-primary" type="submit" @onclick="(() => SendIt(Candidate))">Submit</button>
				 <a class="btn btn-outline-primary"  @onclick="(() => RenderReactDetails(Candidate))">View Details</a> @*href="#@($"details-{Candidate.Id}")" *@
				@* Uncomment the share button below when implemented *@
				@* <div style="display: inline-block; margin-left: 30px;">
					<i class="oi oi-share-boxed" style="color: gray;"></i><button class="btn btn-link" type="submit" disabled>Share</button>
				</div> *@
			</div>
		</div>
	</EditForm>
</div>

@code {
    private string[] optionList = new string[] { "Yes", "No", "Don't Know" };
    private string background = "orca-data-strip-normal";

    [Parameter]
    public EventCallback<Candidate> OnSubmitClick { get; set; }

    [Parameter]
    public Candidate Candidate { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("ReactComponents.RenderReactPlayer", Candidate.ImageUri, Candidate.AudioUri, Candidate.PlayerId);
        }
    }

    private void SetFoundValue(Candidate candidate, string found)
    {
        candidate.Found = found;
    }

	private async void OnFocus()
	{
		background = "orca-data-strip-focused";
		await JSRuntime.InvokeVoidAsync("deliveryMap.focusOnLocation", Candidate.Location.Latitude, Candidate.Location.Longitude, Candidate.Location.Name);
	}

    private async Task OnBlur()
    {
		await JSRuntime.InvokeVoidAsync("deliveryMap.unFocus");
        await JSRuntime.InvokeVoidAsync("StopPlaying", Candidate.PlayerId);
        background = "orca-data-strip-normal";
    }

    private async Task SendIt(Candidate candidate)
    {
		background = "orca-data-strip-normal";
        await OnSubmitClick.InvokeAsync(candidate);
    }

	private async Task RenderReactDetails(Candidate candidate)
	{
		await JSRuntime.InvokeVoidAsync("ReactComponents.RenderReactDetails", candidate);
	}
}
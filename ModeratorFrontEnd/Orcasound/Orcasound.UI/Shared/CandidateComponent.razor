@inject IJSRuntime JSRuntime

<div tabindex="0" 
	 class="orca-data-strip @background" 
	 @onmouseover="OnFormFocus" 
	 @onmouseout="OnFormBlur">
	<EditForm Model="Candidate" class="container-fluid" >
		<p class="orca-data-strip-header mt-0">@Candidate.Id</p>
		<div class="row" style="padding:7px">
			<div class="col-6">
				<p class="orca-data-strip-data"><i class="oi oi-clock" style="width: 20px"></i>&nbsp;@Candidate.WhaleTime</p>
				<p class="orca-data-strip-data"><i class="oi oi-microphone" style="width: 20px"></i>&nbsp;@Candidate.Detections detection(s)</p>
				<div class="form-group mt-3 mb-0">
					<label class="mb-0">Was there an SRKW call in this clip?</label>
					<div style="display: grid">
						@foreach (var option in optionList)
						{
							<label for=@(option + Candidate.Id)>
								<input type="radio"
									   name="found"
									   id=@(option + Candidate.Id)
									   @onchange="(() => SetFoundValue(Candidate, option))" />
								@option
							</label>
						}
					</div>
				</div>
				<div class="form-group">
					<label for=@($"tags-{Candidate.Id}")>Tags</label>
					<div>
						<InputText class="form-control" placeholder="Add tags" id=@($"tags-{Candidate.Id}") @bind-Value="@Candidate.Tags" />
					</div>
				</div>
			</div>
			<div class="col-6">
				<p class="orca-data-strip-data"><i class="oi oi-map-marker" style="width: 20px"></i>&nbsp;@Candidate.Location.Name</p>
				<p class="orca-data-strip-data"><i class="oi oi-graph" style="width: 20px"></i>&nbsp;@String.Format("{0:0.00}", Candidate.AverageConfidence)% average confidence</p>
				<div class="mt-2">
					<div id=@($"react-player-{Candidate.PlayerId}")></div>
				</div>
			</div>
			<div class="col-11 form-group">
				<label for=@($"comments-{Candidate.Id}")>Comments</label>
				<div>
					<InputTextArea class="form-control" placeholder="Add comments" id=@($"comments-{Candidate.Id}") @bind-Value="@Candidate.Comments"  />
				</div>
			</div>
			<div class="col-6">
				<AuthorizeView Policy="ModeratorGroupRole">
					<Authorized Context="Auth">
						<button class="btn btn-primary"
								id=@($"submit-{Candidate.PlayerId}")
								type="submit"
								@onclick="(() => SendIt(Candidate))"
								disabled="@submitDisabled">
							Submit
						</button>
					</Authorized>
					<NotAuthorized Context="Auth">
						<button class="btn btn-primary"
								id=@($"submit-{Candidate.PlayerId}")
								type="submit"
								@onclick="(() => SignInPopup())"
								disabled="@submitDisabled">
							Submit
						</button>
					</NotAuthorized>
				</AuthorizeView>
				<a class="btn btn-outline-primary"
				   @onclick="(() => RenderReactDetails(Candidate))">
					View Details
				</a>
			</div>
		</div>
	</EditForm>
</div>

@code {
	private string[] optionList = new string[] { "Yes", "No", "Don't Know" };
	private string background = "orca-data-strip-normal";
	private bool submitDisabled = true;

	[Parameter]
	public EventCallback<Candidate> OnSubmitClick { get; set; }

	[Parameter]
	public Candidate Candidate { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await JSRuntime.InvokeVoidAsync("ReactComponents.RenderReactPlayer", Candidate.ImageUri, Candidate.AudioUri, Candidate.PlayerId);
	}

	private void SetFoundValue(Candidate candidate, string found)
	{
		candidate.Found = found;
		submitDisabled = false;
	}

	private async void OnFormFocus()
	{
		background = "orca-data-strip-focused";
		await JSRuntime.InvokeVoidAsync("deliveryMap.focusOnLocation", Candidate.Location.Latitude, Candidate.Location.Longitude, Candidate.Location.Name);
	}

	private async void OnFormBlur()
	{
		background = "orca-data-strip-normal";
		await JSRuntime.InvokeVoidAsync("deliveryMap.unFocus");
	}

	private async Task SendIt(Candidate candidate)
	{
		background = "orca-data-strip-normal";
		await JSRuntime.InvokeVoidAsync("deliveryMap.unFocus");
		await OnSubmitClick.InvokeAsync(candidate);
	}

	private async Task SignInPopup()
	{
		await JSRuntime.InvokeVoidAsync("alert", "You must Log In before you can Submit this entry.");
	}

	private async Task RenderReactDetails(Candidate candidate)
	{
		await JSRuntime.InvokeVoidAsync("ReactComponents.RenderReactDetails", candidate);
	}
}